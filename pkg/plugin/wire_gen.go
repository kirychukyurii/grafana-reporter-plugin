// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package plugin

import (
	"github.com/google/wire"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/adapter/grafana"
	store2 "github.com/kirychukyurii/grafana-reporter-plugin/pkg/adapter/store"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/domain/service"
	cron2 "github.com/kirychukyurii/grafana-reporter-plugin/pkg/handler/cron"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/handler/http"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/infra/cdp"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/infra/cron"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/infra/log"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/infra/smtp"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/infra/store"
	"github.com/kirychukyurii/grafana-reporter-plugin/pkg/setting"
)

// Injectors from wire.go:

func Initialize(settingSetting *setting.Setting, databaseManager store.DatabaseManager, logger *log.Logger, dashboardAdapter grafana.DashboardAdapter, browserPoolManager cdp.BrowserPoolManager, schedulers *cron.Schedulers, sender smtp.Sender) (*AppInstance, error) {
	report := service.NewReportService(settingSetting, logger, dashboardAdapter, browserPoolManager)
	httpReport := http.NewReportHandler(report)
	reportScheduleStore := store2.NewReportScheduleStore(databaseManager, logger)
	reportSchedule := service.NewReportScheduleService(logger, report, reportScheduleStore, schedulers, sender)
	httpReportSchedule := http.NewReportScheduleHandler(reportSchedule)
	handler := http.New(httpReport, httpReportSchedule)
	reportScheduleCron := cron2.NewReportScheduleCronHandler(logger, reportSchedule)
	appInstance, err := newAppInstance(handler, reportScheduleCron)
	if err != nil {
		return nil, err
	}
	return appInstance, nil
}

func InitializeCronHandler(settingSetting *setting.Setting, databaseManager store.DatabaseManager, logger *log.Logger, dashboardAdapter grafana.DashboardAdapter, browserPoolManager cdp.BrowserPoolManager, schedulers *cron.Schedulers, sender smtp.Sender) (*cron2.ReportScheduleCron, error) {
	report := service.NewReportService(settingSetting, logger, dashboardAdapter, browserPoolManager)
	reportScheduleStore := store2.NewReportScheduleStore(databaseManager, logger)
	reportSchedule := service.NewReportScheduleService(logger, report, reportScheduleStore, schedulers, sender)
	reportScheduleCron := cron2.NewReportScheduleCronHandler(logger, reportSchedule)
	return reportScheduleCron, nil
}

// wire.go:

var wireBasicSet = wire.NewSet(store2.ProviderSet, wire.Bind(new(store2.ReportScheduleStoreManager), new(*store2.ReportScheduleStore)), service.ProviderSet, wire.Bind(new(service.ReportService), new(*service.Report)), wire.Bind(new(service.ReportScheduleService), new(*service.ReportSchedule)), http.ProviderSet, wire.Bind(new(http.ReportHandler), new(*http.Report)), wire.Bind(new(http.ReportScheduleHandler), new(*http.ReportSchedule)), wire.Bind(new(http.HandlerManager), new(*http.Handler)), cron2.ProviderSet, wire.Bind(new(cron2.ReportScheduleCronHandler), new(*cron2.ReportScheduleCron)))
